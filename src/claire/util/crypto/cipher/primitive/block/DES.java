package claire.util.crypto.cipher.primitive.block;

import java.util.Arrays;

import claire.util.crypto.KeyFactory;
import claire.util.crypto.cipher.key.block.KeyDES;
import claire.util.crypto.rng.RandUtils;
import claire.util.logging.Log;
import claire.util.memory.Bits;
import claire.util.standards.crypto.ISymmetric;

public class DES
	   implements ISymmetric<KeyDES>
{
	private static final long[] IP = new long[] {
		0x0000000000000000L, 0x0000008000000000L, 0x0000000000000080L, 0x0000008000000080L,
		0x0000800000000000L, 0x0000808000000000L, 0x0000800000000080L, 0x0000808000000080L,
		0x0000000000008000L, 0x0000008000008000L, 0x0000000000008080L, 0x0000008000008080L,
		0x0000800000008000L, 0x0000808000008000L, 0x0000800000008080L, 0x0000808000008080L,
		0x0080000000000000L, 0x0080008000000000L, 0x0080000000000080L, 0x0080008000000080L,
		0x0080800000000000L, 0x0080808000000000L, 0x0080800000000080L, 0x0080808000000080L,
		0x0080000000008000L, 0x0080008000008000L, 0x0080000000008080L, 0x0080008000008080L,
		0x0080800000008000L, 0x0080808000008000L, 0x0080800000008080L, 0x0080808000008080L,
		0x0000000000800000L, 0x0000008000800000L, 0x0000000000800080L, 0x0000008000800080L,
		0x0000800000800000L, 0x0000808000800000L, 0x0000800000800080L, 0x0000808000800080L,
		0x0000000000808000L, 0x0000008000808000L, 0x0000000000808080L, 0x0000008000808080L,
		0x0000800000808000L, 0x0000808000808000L, 0x0000800000808080L, 0x0000808000808080L,
		0x0080000000800000L, 0x0080008000800000L, 0x0080000000800080L, 0x0080008000800080L,
		0x0080800000800000L, 0x0080808000800000L, 0x0080800000800080L, 0x0080808000800080L,
		0x0080000000808000L, 0x0080008000808000L, 0x0080000000808080L, 0x0080008000808080L,
		0x0080800000808000L, 0x0080808000808000L, 0x0080800000808080L, 0x0080808000808080L,
		0x8000000000000000L, 0x8000008000000000L, 0x8000000000000080L, 0x8000008000000080L,
		0x8000800000000000L, 0x8000808000000000L, 0x8000800000000080L, 0x8000808000000080L,
		0x8000000000008000L, 0x8000008000008000L, 0x8000000000008080L, 0x8000008000008080L,
		0x8000800000008000L, 0x8000808000008000L, 0x8000800000008080L, 0x8000808000008080L,
		0x8080000000000000L, 0x8080008000000000L, 0x8080000000000080L, 0x8080008000000080L,
		0x8080800000000000L, 0x8080808000000000L, 0x8080800000000080L, 0x8080808000000080L,
		0x8080000000008000L, 0x8080008000008000L, 0x8080000000008080L, 0x8080008000008080L,
		0x8080800000008000L, 0x8080808000008000L, 0x8080800000008080L, 0x8080808000008080L,
		0x8000000000800000L, 0x8000008000800000L, 0x8000000000800080L, 0x8000008000800080L,
		0x8000800000800000L, 0x8000808000800000L, 0x8000800000800080L, 0x8000808000800080L,
		0x8000000000808000L, 0x8000008000808000L, 0x8000000000808080L, 0x8000008000808080L,
		0x8000800000808000L, 0x8000808000808000L, 0x8000800000808080L, 0x8000808000808080L,
		0x8080000000800000L, 0x8080008000800000L, 0x8080000000800080L, 0x8080008000800080L,
		0x8080800000800000L, 0x8080808000800000L, 0x8080800000800080L, 0x8080808000800080L,
		0x8080000000808000L, 0x8080008000808000L, 0x8080000000808080L, 0x8080008000808080L,
		0x8080800000808000L, 0x8080808000808000L, 0x8080800000808080L, 0x8080808000808080L,
		0x0000000080000000L, 0x0000008080000000L, 0x0000000080000080L, 0x0000008080000080L,
		0x0000800080000000L, 0x0000808080000000L, 0x0000800080000080L, 0x0000808080000080L,
		0x0000000080008000L, 0x0000008080008000L, 0x0000000080008080L, 0x0000008080008080L,
		0x0000800080008000L, 0x0000808080008000L, 0x0000800080008080L, 0x0000808080008080L,
		0x0080000080000000L, 0x0080008080000000L, 0x0080000080000080L, 0x0080008080000080L,
		0x0080800080000000L, 0x0080808080000000L, 0x0080800080000080L, 0x0080808080000080L,
		0x0080000080008000L, 0x0080008080008000L, 0x0080000080008080L, 0x0080008080008080L,
		0x0080800080008000L, 0x0080808080008000L, 0x0080800080008080L, 0x0080808080008080L,
		0x0000000080800000L, 0x0000008080800000L, 0x0000000080800080L, 0x0000008080800080L,
		0x0000800080800000L, 0x0000808080800000L, 0x0000800080800080L, 0x0000808080800080L,
		0x0000000080808000L, 0x0000008080808000L, 0x0000000080808080L, 0x0000008080808080L,
		0x0000800080808000L, 0x0000808080808000L, 0x0000800080808080L, 0x0000808080808080L,
		0x0080000080800000L, 0x0080008080800000L, 0x0080000080800080L, 0x0080008080800080L,
		0x0080800080800000L, 0x0080808080800000L, 0x0080800080800080L, 0x0080808080800080L,
		0x0080000080808000L, 0x0080008080808000L, 0x0080000080808080L, 0x0080008080808080L,
		0x0080800080808000L, 0x0080808080808000L, 0x0080800080808080L, 0x0080808080808080L,
		0x8000000080000000L, 0x8000008080000000L, 0x8000000080000080L, 0x8000008080000080L,
		0x8000800080000000L, 0x8000808080000000L, 0x8000800080000080L, 0x8000808080000080L,
		0x8000000080008000L, 0x8000008080008000L, 0x8000000080008080L, 0x8000008080008080L,
		0x8000800080008000L, 0x8000808080008000L, 0x8000800080008080L, 0x8000808080008080L,
		0x8080000080000000L, 0x8080008080000000L, 0x8080000080000080L, 0x8080008080000080L,
		0x8080800080000000L, 0x8080808080000000L, 0x8080800080000080L, 0x8080808080000080L,
		0x8080000080008000L, 0x8080008080008000L, 0x8080000080008080L, 0x8080008080008080L,
		0x8080800080008000L, 0x8080808080008000L, 0x8080800080008080L, 0x8080808080008080L,
		0x8000000080800000L, 0x8000008080800000L, 0x8000000080800080L, 0x8000008080800080L,
		0x8000800080800000L, 0x8000808080800000L, 0x8000800080800080L, 0x8000808080800080L,
		0x8000000080808000L, 0x8000008080808000L, 0x8000000080808080L, 0x8000008080808080L,
		0x8000800080808000L, 0x8000808080808000L, 0x8000800080808080L, 0x8000808080808080L,
		0x8080000080800000L, 0x8080008080800000L, 0x8080000080800080L, 0x8080008080800080L,
		0x8080800080800000L, 0x8080808080800000L, 0x8080800080800080L, 0x8080808080800080L,
		0x8080000080808000L, 0x8080008080808000L, 0x8080000080808080L, 0x8080008080808080L,
		0x8080800080808000L, 0x8080808080808000L, 0x8080800080808080L, 0x8080808080808080L,
	};
	
	public static final long[] iIP = new long[] {
		0x0000000000000000L, 0x8000000000000000L, 0x0080000000000000L, 0x8080000000000000L, 
		0x0000800000000000L, 0x8000800000000000L, 0x0080800000000000L, 0x8080800000000000L, 
		0x0000008000000000L, 0x8000008000000000L, 0x0080008000000000L, 0x8080008000000000L, 
		0x0000808000000000L, 0x8000808000000000L, 0x0080808000000000L, 0x8080808000000000L, 
		0x0000000080000000L, 0x8000000080000000L, 0x0080000080000000L, 0x8080000080000000L, 
		0x0000800080000000L, 0x8000800080000000L, 0x0080800080000000L, 0x8080800080000000L, 
		0x0000008080000000L, 0x8000008080000000L, 0x0080008080000000L, 0x8080008080000000L, 
		0x0000808080000000L, 0x8000808080000000L, 0x0080808080000000L, 0x8080808080000000L, 
		0x0000000000800000L, 0x8000000000800000L, 0x0080000000800000L, 0x8080000000800000L, 
		0x0000800000800000L, 0x8000800000800000L, 0x0080800000800000L, 0x8080800000800000L, 
		0x0000008000800000L, 0x8000008000800000L, 0x0080008000800000L, 0x8080008000800000L, 
		0x0000808000800000L, 0x8000808000800000L, 0x0080808000800000L, 0x8080808000800000L, 
		0x0000000080800000L, 0x8000000080800000L, 0x0080000080800000L, 0x8080000080800000L, 
		0x0000800080800000L, 0x8000800080800000L, 0x0080800080800000L, 0x8080800080800000L, 
		0x0000008080800000L, 0x8000008080800000L, 0x0080008080800000L, 0x8080008080800000L, 
		0x0000808080800000L, 0x8000808080800000L, 0x0080808080800000L, 0x8080808080800000L, 
		0x0000000000008000L, 0x8000000000008000L, 0x0080000000008000L, 0x8080000000008000L, 
		0x0000800000008000L, 0x8000800000008000L, 0x0080800000008000L, 0x8080800000008000L, 
		0x0000008000008000L, 0x8000008000008000L, 0x0080008000008000L, 0x8080008000008000L, 
		0x0000808000008000L, 0x8000808000008000L, 0x0080808000008000L, 0x8080808000008000L, 
		0x0000000080008000L, 0x8000000080008000L, 0x0080000080008000L, 0x8080000080008000L, 
		0x0000800080008000L, 0x8000800080008000L, 0x0080800080008000L, 0x8080800080008000L, 
		0x0000008080008000L, 0x8000008080008000L, 0x0080008080008000L, 0x8080008080008000L, 
		0x0000808080008000L, 0x8000808080008000L, 0x0080808080008000L, 0x8080808080008000L, 
		0x0000000000808000L, 0x8000000000808000L, 0x0080000000808000L, 0x8080000000808000L, 
		0x0000800000808000L, 0x8000800000808000L, 0x0080800000808000L, 0x8080800000808000L, 
		0x0000008000808000L, 0x8000008000808000L, 0x0080008000808000L, 0x8080008000808000L, 
		0x0000808000808000L, 0x8000808000808000L, 0x0080808000808000L, 0x8080808000808000L, 
		0x0000000080808000L, 0x8000000080808000L, 0x0080000080808000L, 0x8080000080808000L, 
		0x0000800080808000L, 0x8000800080808000L, 0x0080800080808000L, 0x8080800080808000L, 
		0x0000008080808000L, 0x8000008080808000L, 0x0080008080808000L, 0x8080008080808000L, 
		0x0000808080808000L, 0x8000808080808000L, 0x0080808080808000L, 0x8080808080808000L, 
		0x0000000000000080L, 0x8000000000000080L, 0x0080000000000080L, 0x8080000000000080L, 
		0x0000800000000080L, 0x8000800000000080L, 0x0080800000000080L, 0x8080800000000080L, 
		0x0000008000000080L, 0x8000008000000080L, 0x0080008000000080L, 0x8080008000000080L, 
		0x0000808000000080L, 0x8000808000000080L, 0x0080808000000080L, 0x8080808000000080L, 
		0x0000000080000080L, 0x8000000080000080L, 0x0080000080000080L, 0x8080000080000080L, 
		0x0000800080000080L, 0x8000800080000080L, 0x0080800080000080L, 0x8080800080000080L, 
		0x0000008080000080L, 0x8000008080000080L, 0x0080008080000080L, 0x8080008080000080L, 
		0x0000808080000080L, 0x8000808080000080L, 0x0080808080000080L, 0x8080808080000080L, 
		0x0000000000800080L, 0x8000000000800080L, 0x0080000000800080L, 0x8080000000800080L, 
		0x0000800000800080L, 0x8000800000800080L, 0x0080800000800080L, 0x8080800000800080L, 
		0x0000008000800080L, 0x8000008000800080L, 0x0080008000800080L, 0x8080008000800080L, 
		0x0000808000800080L, 0x8000808000800080L, 0x0080808000800080L, 0x8080808000800080L, 
		0x0000000080800080L, 0x8000000080800080L, 0x0080000080800080L, 0x8080000080800080L, 
		0x0000800080800080L, 0x8000800080800080L, 0x0080800080800080L, 0x8080800080800080L, 
		0x0000008080800080L, 0x8000008080800080L, 0x0080008080800080L, 0x8080008080800080L, 
		0x0000808080800080L, 0x8000808080800080L, 0x0080808080800080L, 0x8080808080800080L, 
		0x0000000000008080L, 0x8000000000008080L, 0x0080000000008080L, 0x8080000000008080L, 
		0x0000800000008080L, 0x8000800000008080L, 0x0080800000008080L, 0x8080800000008080L, 
		0x0000008000008080L, 0x8000008000008080L, 0x0080008000008080L, 0x8080008000008080L, 
		0x0000808000008080L, 0x8000808000008080L, 0x0080808000008080L, 0x8080808000008080L, 
		0x0000000080008080L, 0x8000000080008080L, 0x0080000080008080L, 0x8080000080008080L, 
		0x0000800080008080L, 0x8000800080008080L, 0x0080800080008080L, 0x8080800080008080L, 
		0x0000008080008080L, 0x8000008080008080L, 0x0080008080008080L, 0x8080008080008080L, 
		0x0000808080008080L, 0x8000808080008080L, 0x0080808080008080L, 0x8080808080008080L, 
		0x0000000000808080L, 0x8000000000808080L, 0x0080000000808080L, 0x8080000000808080L, 
		0x0000800000808080L, 0x8000800000808080L, 0x0080800000808080L, 0x8080800000808080L, 
		0x0000008000808080L, 0x8000008000808080L, 0x0080008000808080L, 0x8080008000808080L, 
		0x0000808000808080L, 0x8000808000808080L, 0x0080808000808080L, 0x8080808000808080L, 
		0x0000000080808080L, 0x8000000080808080L, 0x0080000080808080L, 0x8080000080808080L, 
		0x0000800080808080L, 0x8000800080808080L, 0x0080800080808080L, 0x8080800080808080L, 
		0x0000008080808080L, 0x8000008080808080L, 0x0080008080808080L, 0x8080008080808080L, 
		0x0000808080808080L, 0x8000808080808080L, 0x0080808080808080L, 0x8080808080808080L, 
	};
	
	private static final int[] PC2_1_1 = new int[] {
		0x000000, 0x000040, 0x000010,  0x000050,
		0x004000, 0x004040, 0x004010,  0x004050,
		0x040000, 0x040040, 0x040010,  0x040050,
		0x044000, 0x044040, 0x044010,  0x044050,
		0x000100, 0x000140, 0x000110,  0x000150,
		0x004100, 0x004140, 0x004110,  0x004150,
		0x040100, 0x040140, 0x040110,  0x040150,
		0x044100, 0x044140, 0x044110,  0x044150,
		0x020000, 0x020040, 0x020010,  0x020050,
		0x024000, 0x024040, 0x024010,  0x024050,
		0x060000, 0x060040, 0x060010,  0x060050,
		0x064000, 0x064040, 0x064010,  0x064050,
		0x020100, 0x020140, 0x020110,  0x020150,
		0x024100, 0x024140, 0x024110,  0x024150,
		0x060100, 0x060140, 0x060110,  0x060150,
		0x064100, 0x064140, 0x064110,  0x064150,
		0x000001, 0x000041, 0x000011,  0x000051,
		0x004001, 0x004041, 0x004011,  0x004051,
		0x040001, 0x040041, 0x040011,  0x040051,
		0x044001, 0x044041, 0x044011,  0x044051,
		0x000101, 0x000141, 0x000111,  0x000151,
		0x004101, 0x004141, 0x004111,  0x004151,
		0x040101, 0x040141, 0x040111,  0x040151,
		0x044101, 0x044141, 0x044111,  0x044151,
		0x020001, 0x020041, 0x020011,  0x020051,
		0x024001, 0x024041, 0x024011,  0x024051,
		0x060001, 0x060041, 0x060011,  0x060051,
		0x064001, 0x064041, 0x064011,  0x064051,
		0x020101, 0x020141, 0x020111,  0x020151,
		0x024101, 0x024141, 0x024111,  0x024151,
		0x060101, 0x060141, 0x060111,  0x060151,
		0x064101, 0x064141, 0x064111,  0x064151,
		0x080000, 0x080040, 0x080010,  0x080050,
		0x084000, 0x084040, 0x084010,  0x084050,
		0x0C0000, 0x0C0040, 0x0C0010,  0x0C0050,
		0x0C4000, 0x0C4040, 0x0C4010,  0x0C4050,
		0x080100, 0x080140, 0x080110,  0x080150,
		0x084100, 0x084140, 0x084110,  0x084150,
		0x0C0100, 0x0C0140, 0x0C0110,  0x0C0150,
		0x0C4100, 0x0C4140, 0x0C4110,  0x0C4150,
		0x0A0000, 0x0A0040, 0x0A0010,  0x0A0050,
		0x0A4000, 0x0A4040, 0x0A4010,  0x0A4050,
		0x0E0000, 0x0E0040, 0x0E0010,  0x0E0050,
		0x0E4000, 0x0E4040, 0x0E4010,  0x0E4050,
		0x0A0100, 0x0A0140, 0x0A0110,  0x0A0150,
		0x0A4100, 0x0A4140, 0x0A4110,  0x0A4150,
		0x0E0100, 0x0E0140, 0x0E0110,  0x0E0150,
		0x0E4100, 0x0E4140, 0x0E4110,  0x0E4150,
		0x080001, 0x080041, 0x080011,  0x080051,
		0x084001, 0x084041, 0x084011,  0x084051,
		0x0C0001, 0x0C0041, 0x0C0011,  0x0C0051,
		0x0C4001, 0x0C4041, 0x0C4011,  0x0C4051,
		0x080101, 0x080141, 0x080111,  0x080151,
		0x084101, 0x084141, 0x084111,  0x084151,
		0x0C0101, 0x0C0141, 0x0C0111,  0x0C0151,
		0x0C4101, 0x0C4141, 0x0C4111,  0x0C4151,
		0x0A0001, 0x0A0041, 0x0A0011,  0x0A0051,
		0x0A4001, 0x0A4041, 0x0A4011,  0x0A4051,
		0x0E0001, 0x0E0041, 0x0E0011,  0x0E0051,
		0x0E4001, 0x0E4041, 0x0E4011,  0x0E4051,
		0x0A0101, 0x0A0141, 0x0A0111,  0x0A0151,
		0x0A4101, 0x0A4141, 0x0A4111,  0x0A4151,
		0x0E0101, 0x0E0141, 0x0E0111,  0x0E0151,
		0x0E4101, 0x0E4141, 0x0E4111,  0x0E4151,
	};
	
	private static final int[] PC2_1_2 = new int[] {
		0x000000, 0x000020, 0x008000, 0x008020,
		0x800000, 0x800020, 0x808000, 0x808020,
		0x000002, 0x000022, 0x008002, 0x008022,
		0x800002, 0x800022, 0x808002, 0x808022,
		0x000200, 0x000220, 0x008200, 0x008220,
		0x800200, 0x800220, 0x808200, 0x808220,
		0x000202, 0x000222, 0x008202, 0x008222,
		0x800202, 0x800222, 0x808202, 0x808222,
		0x200000, 0x200020, 0x208000, 0x208020,
		0xA00000, 0xA00020, 0xA08000, 0xA08020,
		0x200002, 0x200022, 0x208002, 0x208022,
		0xA00002, 0xA00022, 0xA08002, 0xA08022,
		0x200200, 0x200220, 0x208200, 0x208220,
		0xA00200, 0xA00220, 0xA08200, 0xA08220,
		0x200202, 0x200222, 0x208202, 0x208222,
		0xA00202, 0xA00222, 0xA08202, 0xA08222,
		0x001000, 0x001020, 0x009000, 0x009020,
		0x801000, 0x801020, 0x809000, 0x809020,
		0x001002, 0x001022, 0x009002, 0x009022,
		0x801002, 0x801022, 0x809002, 0x809022,
		0x001200, 0x001220, 0x009200, 0x009220,
		0x801200, 0x801220, 0x809200, 0x809220,
		0x001202, 0x001222, 0x009202, 0x009222,
		0x801202, 0x801222, 0x809202, 0x809222,
		0x201000, 0x201020, 0x209000, 0x209020,
		0xA01000, 0xA01020, 0xA09000, 0xA09020,
		0x201002, 0x201022, 0x209002, 0x209022,
		0xA01002, 0xA01022, 0xA09002, 0xA09022,
		0x201200, 0x201220, 0x209200, 0x209220,
		0xA01200, 0xA01220, 0xA09200, 0xA09220,
		0x201202, 0x201222, 0x209202, 0x209222,
		0xA01202, 0xA01222, 0xA09202, 0xA09222,
	};
	
	private static final int[] PC2_1_3 = new int[] {
		0x000000, 0x100000, 0x000800, 0x100800,
		0x000000, 0x100000, 0x000800, 0x100800,
		0x002000, 0x102000, 0x002800, 0x102800,
		0x002000, 0x102000, 0x002800, 0x102800,
		0x000004, 0x100004, 0x000804, 0x100804,
		0x000004, 0x100004, 0x000804, 0x100804,
		0x002004, 0x102004, 0x002804, 0x102804,
		0x002004, 0x102004, 0x002804, 0x102804,
		0x000400, 0x100400, 0x000C00, 0x100C00,
		0x000400, 0x100400, 0x000C00, 0x100C00,
		0x002400, 0x102400, 0x002C00, 0x102C00,
		0x002400, 0x102400, 0x002C00, 0x102C00,
		0x000404, 0x100404, 0x000C04, 0x100C04,
		0x000404, 0x100404, 0x000C04, 0x100C04,
		0x002404, 0x102404, 0x002C04, 0x102C04,
		0x002404, 0x102404, 0x002C04, 0x102C04,
		0x000000, 0x100000, 0x000800, 0x100800,
		0x000000, 0x100000, 0x000800, 0x100800,
		0x002000, 0x102000, 0x002800, 0x102800,
		0x002000, 0x102000, 0x002800, 0x102800,
		0x000004, 0x100004, 0x000804, 0x100804,
		0x000004, 0x100004, 0x000804, 0x100804,
		0x002004, 0x102004, 0x002804, 0x102804,
		0x002004, 0x102004, 0x002804, 0x102804,
		0x000400, 0x100400, 0x000C00, 0x100C00,
		0x000400, 0x100400, 0x000C00, 0x100C00,
		0x002400, 0x102400, 0x002C00, 0x102C00,
		0x002400, 0x102400, 0x002C00, 0x102C00,
		0x000404, 0x100404, 0x000C04, 0x100C04,
		0x000404, 0x100404, 0x000C04, 0x100C04,
		0x002404, 0x102404, 0x002C04, 0x102C04,
		0x002404, 0x102404, 0x002C04, 0x102C04,
		0x400000, 0x500000, 0x400800, 0x500800,
		0x400000, 0x500000, 0x400800, 0x500800,
		0x402000, 0x502000, 0x402800, 0x502800,
		0x402000, 0x502000, 0x402800, 0x502800,
		0x400004, 0x500004, 0x400804, 0x500804,
		0x400004, 0x500004, 0x400804, 0x500804,
		0x402004, 0x502004, 0x402804, 0x502804,
		0x402004, 0x502004, 0x402804, 0x502804,
		0x400400, 0x500400, 0x400C00, 0x500C00,
		0x400400, 0x500400, 0x400C00, 0x500C00,
		0x402400, 0x502400, 0x402C00, 0x502C00,
		0x402400, 0x502400, 0x402C00, 0x502C00,
		0x400404, 0x500404, 0x400C04, 0x500C04,
		0x400404, 0x500404, 0x400C04, 0x500C04,
		0x402404, 0x502404, 0x402C04, 0x502C04,
		0x402404, 0x502404, 0x402C04, 0x502C04,
		0x400000, 0x500000, 0x400800, 0x500800,
		0x400000, 0x500000, 0x400800, 0x500800,
		0x402000, 0x502000, 0x402800, 0x502800,
		0x402000, 0x502000, 0x402800, 0x502800,
		0x400004, 0x500004, 0x400804, 0x500804,
		0x400004, 0x500004, 0x400804, 0x500804,
		0x402004, 0x502004, 0x402804, 0x502804,
		0x402004, 0x502004, 0x402804, 0x502804,
		0x400400, 0x500400, 0x400C00, 0x500C00,
		0x400400, 0x500400, 0x400C00, 0x500C00,
		0x402400, 0x502400, 0x402C00, 0x502C00,
		0x402400, 0x502400, 0x402C00, 0x502C00,
		0x400404, 0x500404, 0x400C04, 0x500C04,
		0x400404, 0x500404, 0x400C04, 0x500C04,
		0x402404, 0x502404, 0x402C04, 0x502C04,
		0x402404, 0x502404, 0x402C04, 0x502C04,
	};
	
	private static final int[] PC2_1_4 = new int[] {
		0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000,
		0x010000, 0x010000, 0x010000, 0x010000,
		0x010000, 0x010000, 0x010000, 0x010000,
		0x010000, 0x010000, 0x010000, 0x010000,
		0x010000, 0x010000, 0x010000, 0x010000,
		0x000004, 0x000004, 0x000004, 0x000004,
		0x000004, 0x000004, 0x000004, 0x000004,
		0x000004, 0x000004, 0x000004, 0x000004,
		0x000004, 0x000004, 0x000004, 0x000004,
		0x010004, 0x010004, 0x010004, 0x010004,
		0x010004, 0x010004, 0x010004, 0x010004,
		0x010004, 0x010004, 0x010004, 0x010004,
		0x010004, 0x010004, 0x010004, 0x010004,
		0x000040, 0x000040, 0x000040, 0x000040,
		0x000040, 0x000040, 0x000040, 0x000040,
		0x000040, 0x000040, 0x000040, 0x000040,
		0x000040, 0x000040, 0x000040, 0x000040,
		0x010040, 0x010040, 0x010040, 0x010040,
		0x010040, 0x010040, 0x010040, 0x010040,
		0x010040, 0x010040, 0x010040, 0x010040,
		0x010040, 0x010040, 0x010040, 0x010040,
		0x000044, 0x000044, 0x000044, 0x000044,
		0x000044, 0x000044, 0x000044, 0x000044,
		0x000044, 0x000044, 0x000044, 0x000044,
		0x000044, 0x000044, 0x000044, 0x000044,
		0x010044, 0x010044, 0x010044, 0x010044,
		0x010044, 0x010044, 0x010044, 0x010044,
		0x010044, 0x010044, 0x010044, 0x010044,
		0x010044, 0x010044, 0x010044, 0x010044,
	};
	
	private static final int[] PC2_2_1 = new int[] {
		0x000002, 0x000003, 0x200002, 0x200003,
		0x020002, 0x020003, 0x220002, 0x220003,
		0x000002, 0x000003, 0x200002, 0x200003,
		0x020002, 0x020003, 0x220002, 0x220003,
	};
	
	private static final int[] PC2_2_2 = new int[] {
		0x000000, 0x010000, 0x000200, 0x010200,
		0x000000, 0x010000, 0x000200, 0x010200,
		0x100000, 0x110000, 0x100200, 0x110200,
		0x100000, 0x110000, 0x100200, 0x110200,
		0x000004, 0x010004, 0x000204, 0x010204,
		0x000004, 0x010004, 0x000204, 0x010204,
		0x100004, 0x110004, 0x100204, 0x110204,
		0x100004, 0x110004, 0x100204, 0x110204,
		0x000000, 0x010000, 0x000200, 0x010200,
		0x000000, 0x010000, 0x000200, 0x010200,
		0x100000, 0x110000, 0x100200, 0x110200,
		0x100000, 0x110000, 0x100200, 0x110200,
		0x000004, 0x010004, 0x000204, 0x010204,
		0x000004, 0x010004, 0x000204, 0x010204,
		0x100004, 0x110004, 0x100204, 0x110204,
		0x100004, 0x110004, 0x100204, 0x110204,
		0x000040, 0x010040, 0x000240, 0x010240,
		0x000040, 0x010040, 0x000240, 0x010240,
		0x100040, 0x110040, 0x100240, 0x110240,
		0x100040, 0x110040, 0x100240, 0x110240,
		0x000044, 0x010044, 0x000244, 0x010244,
		0x000044, 0x010044, 0x000244, 0x010244,
		0x100044, 0x110044, 0x100244, 0x110244,
		0x100044, 0x110044, 0x100244, 0x110244,
		0x000040, 0x010040, 0x000240, 0x010240,
		0x000040, 0x010040, 0x000240, 0x010240,
		0x100040, 0x110040, 0x100240, 0x110240,
		0x100040, 0x110040, 0x100240, 0x110240,
		0x000044, 0x010044, 0x000244, 0x010244,
		0x000044, 0x010044, 0x000244, 0x010244,
		0x100044, 0x110044, 0x100244, 0x110244,
		0x100044, 0x110044, 0x100244, 0x110244,
		0x002000, 0x012000, 0x002200, 0x012200,
		0x002000, 0x012000, 0x002200, 0x012200,
		0x102000, 0x112000, 0x102200, 0x112200,
		0x102000, 0x112000, 0x102200, 0x112200,
		0x002004, 0x012004, 0x002204, 0x012204,
		0x002004, 0x012004, 0x002204, 0x012204,
		0x102004, 0x112004, 0x102204, 0x112204,
		0x102004, 0x112004, 0x102204, 0x112204,
		0x002000, 0x012000, 0x002200, 0x012200,
		0x002000, 0x012000, 0x002200, 0x012200,
		0x102000, 0x112000, 0x102200, 0x112200,
		0x102000, 0x112000, 0x102200, 0x112200,
		0x002004, 0x012004, 0x002204, 0x012204,
		0x002004, 0x012004, 0x002204, 0x012204,
		0x102004, 0x112004, 0x102204, 0x112204,
		0x102004, 0x112004, 0x102204, 0x112204,
		0x002040, 0x012040, 0x002240, 0x012240,
		0x002040, 0x012040, 0x002240, 0x012240,
		0x102040, 0x112040, 0x102240, 0x112240,
		0x102040, 0x112040, 0x102240, 0x112240,
		0x002044, 0x012044, 0x002244, 0x012244,
		0x002044, 0x012044, 0x002244, 0x012244,
		0x102044, 0x112044, 0x102244, 0x112244,
		0x102044, 0x112044, 0x102244, 0x112244,
		0x002040, 0x012040, 0x002240, 0x012240,
		0x002040, 0x012040, 0x002240, 0x012240,
		0x102040, 0x112040, 0x102240, 0x112240,
		0x102040, 0x112040, 0x102240, 0x112240,
		0x002044, 0x012044, 0x002244, 0x012244,
		0x002044, 0x012044, 0x002244, 0x012244,
		0x102044, 0x112044, 0x102244, 0x112244,
		0x102044, 0x112044, 0x102244, 0x112244,
	};
	
	private static final int[] PC2_2_3 = new int[] {
		0x000000, 0x001000, 0x080000, 0x081000,
		0x000020, 0x001020, 0x080020, 0x081020,
		0x004000, 0x005000, 0x084000, 0x085000,
		0x004020, 0x005020, 0x084020, 0x085020,
		0x000800, 0x001800, 0x080800, 0x081800,
		0x000820, 0x001820, 0x080820, 0x081820,
		0x004800, 0x005800, 0x084800, 0x085800,
		0x004820, 0x005820, 0x084820, 0x085820,
		0x000000, 0x001000, 0x080000, 0x081000,
		0x000020, 0x001020, 0x080020, 0x081020,
		0x004000, 0x005000, 0x084000, 0x085000,
		0x004020, 0x005020, 0x084020, 0x085020,
		0x000800, 0x001800, 0x080800, 0x081800,
		0x000820, 0x001820, 0x080820, 0x081820,
		0x004800, 0x005800, 0x084800, 0x085800,
		0x004820, 0x005820, 0x084820, 0x085820,
		0x000010, 0x001010, 0x080010, 0x081010,
		0x000030, 0x001030, 0x080030, 0x081030,
		0x004010, 0x005010, 0x084010, 0x085010,
		0x004030, 0x005030, 0x084030, 0x085030,
		0x000810, 0x001810, 0x080810, 0x081810,
		0x000830, 0x001830, 0x080830, 0x081830,
		0x004810, 0x005810, 0x084810, 0x085810,
		0x004830, 0x005830, 0x084830, 0x085830,
		0x000010, 0x001010, 0x080010, 0x081010,
		0x000030, 0x001030, 0x080030, 0x081030,
		0x004010, 0x005010, 0x084010, 0x085010,
		0x004030, 0x005030, 0x084030, 0x085030,
		0x000810, 0x001810, 0x080810, 0x081810,
		0x000830, 0x001830, 0x080830, 0x081830,
		0x004810, 0x005810, 0x084810, 0x085810,
		0x004830, 0x005830, 0x084830, 0x085830,
		0x800000, 0x801000, 0x880000, 0x881000,
		0x800020, 0x801020, 0x880020, 0x881020,
		0x804000, 0x805000, 0x884000, 0x885000,
		0x804020, 0x805020, 0x884020, 0x885020,
		0x800800, 0x801800, 0x880800, 0x881800,
		0x800820, 0x801820, 0x880820, 0x881820,
		0x804800, 0x805800, 0x884800, 0x885800,
		0x804820, 0x805820, 0x884820, 0x885820,
		0x800000, 0x801000, 0x880000, 0x881000,
		0x800020, 0x801020, 0x880020, 0x881020,
		0x804000, 0x805000, 0x884000, 0x885000,
		0x804020, 0x805020, 0x884020, 0x885020,
		0x800800, 0x801800, 0x880800, 0x881800,
		0x800820, 0x801820, 0x880820, 0x881820,
		0x804800, 0x805800, 0x884800, 0x885800,
		0x804820, 0x805820, 0x884820, 0x885820,
		0x800010, 0x801010, 0x880010, 0x881010,
		0x800030, 0x801030, 0x880030, 0x881030,
		0x804010, 0x805010, 0x884010, 0x885010,
		0x804030, 0x805030, 0x884030, 0x885030,
		0x800810, 0x801810, 0x880810, 0x881810,
		0x800830, 0x801830, 0x880830, 0x881830,
		0x804810, 0x805810, 0x884810, 0x885810,
		0x804830, 0x805830, 0x884830, 0x885830,
		0x800010, 0x801010, 0x880010, 0x881010,
		0x800030, 0x801030, 0x880030, 0x881030,
		0x804010, 0x805010, 0x884010, 0x885010,
		0x804030, 0x805030, 0x884030, 0x885030,
		0x800810, 0x801810, 0x880810, 0x881810,
		0x800830, 0x801830, 0x880830, 0x881830,
		0x804810, 0x805810, 0x884810, 0x885810,
		0x804830, 0x805830, 0x884830, 0x885830,
	};
	
	private static final int[] PC2_2_4 = new int[] {
		0x000000, 0x000100, 0x040000, 0x040100,
		0x000000, 0x000100, 0x040000, 0x040100,
		0x000040, 0x000140, 0x040040, 0x040140,
		0x000040, 0x000140, 0x040040, 0x040140,
		0x400000, 0x400100, 0x440000, 0x440100,
		0x400000, 0x400100, 0x440000, 0x440100,
		0x400040, 0x400140, 0x440040, 0x440140,
		0x400040, 0x400140, 0x440040, 0x440140,
		0x008000, 0x008100, 0x048000, 0x048100,
		0x008000, 0x008100, 0x048000, 0x048100,
		0x008040, 0x008140, 0x048040, 0x048140,
		0x008040, 0x008140, 0x048040, 0x048140,
		0x408000, 0x408100, 0x448000, 0x448100,
		0x408000, 0x408100, 0x448000, 0x448100,
		0x408040, 0x408140, 0x448040, 0x448140,
		0x408040, 0x408140, 0x448040, 0x448140,
		0x000004, 0x000104, 0x040004, 0x040104,
		0x000004, 0x000104, 0x040004, 0x040104,
		0x000044, 0x000144, 0x040044, 0x040144,
		0x000044, 0x000144, 0x040044, 0x040144,
		0x400004, 0x400104, 0x440004, 0x440104,
		0x400004, 0x400104, 0x440004, 0x440104,
		0x400044, 0x400144, 0x440044, 0x440144,
		0x400044, 0x400144, 0x440044, 0x440144,
		0x008004, 0x008104, 0x048004, 0x048104,
		0x008004, 0x008104, 0x048004, 0x048104,
		0x008044, 0x008144, 0x048044, 0x048144,
		0x008044, 0x008144, 0x048044, 0x048144,
		0x408004, 0x408104, 0x448004, 0x448104,
		0x408004, 0x408104, 0x448004, 0x448104,
		0x408044, 0x408144, 0x448044, 0x448144,
		0x408044, 0x408144, 0x448044, 0x448144,
		0x000400, 0x000500, 0x040400, 0x040500,
		0x000400, 0x000500, 0x040400, 0x040500,
		0x000440, 0x000540, 0x040440, 0x040540,
		0x000440, 0x000540, 0x040440, 0x040540,
		0x400400, 0x400500, 0x440400, 0x440500,
		0x400400, 0x400500, 0x440400, 0x440500,
		0x400440, 0x400540, 0x440440, 0x440540,
		0x400440, 0x400540, 0x440440, 0x440540,
		0x008400, 0x008500, 0x048400, 0x048500,
		0x008400, 0x008500, 0x048400, 0x048500,
		0x008440, 0x008540, 0x048440, 0x048540,
		0x008440, 0x008540, 0x048440, 0x048540,
		0x408400, 0x408500, 0x448400, 0x448500,
		0x408400, 0x408500, 0x448400, 0x448500,
		0x408440, 0x408540, 0x448440, 0x448540,
		0x408440, 0x408540, 0x448440, 0x448540,
		0x000404, 0x000504, 0x040404, 0x040504,
		0x000404, 0x000504, 0x040404, 0x040504,
		0x000444, 0x000544, 0x040444, 0x040544,
		0x000444, 0x000544, 0x040444, 0x040544,
		0x400404, 0x400504, 0x440404, 0x440504,
		0x400404, 0x400504, 0x440404, 0x440504,
		0x400444, 0x400544, 0x440444, 0x440544,
		0x400444, 0x400544, 0x440444, 0x440544,
		0x008404, 0x008504, 0x048404, 0x048504,
		0x008404, 0x008504, 0x048404, 0x048504,
		0x008444, 0x008544, 0x048444, 0x048544,
		0x008444, 0x008544, 0x048444, 0x048544,
		0x408404, 0x408504, 0x448404, 0x448504,
		0x408404, 0x408504, 0x448404, 0x448504,
		0x408444, 0x408544, 0x448444, 0x448544,
		0x408444, 0x408544, 0x448444, 0x448544,
	};
	
	private static final int[] S1 = {
        0x01010400, 0x00000000, 0x00010000, 0x01010404,
        0x01010004, 0x00010404, 0x00000004, 0x00010000,
        0x00000400, 0x01010400, 0x01010404, 0x00000400,
        0x01000404, 0x01010004, 0x01000000, 0x00000004,
        0x00000404, 0x01000400, 0x01000400, 0x00010400,
        0x00010400, 0x01010000, 0x01010000, 0x01000404,
        0x00010004, 0x01000004, 0x01000004, 0x00010004,
        0x00000000, 0x00000404, 0x00010404, 0x01000000,
        0x00010000, 0x01010404, 0x00000004, 0x01010000,
        0x01010400, 0x01000000, 0x01000000, 0x00000400,
        0x01010004, 0x00010000, 0x00010400, 0x01000004,
        0x00000400, 0x00000004, 0x01000404, 0x00010404,
        0x01010404, 0x00010004, 0x01010000, 0x01000404,
        0x01000004, 0x00000404, 0x00010404, 0x01010400,
        0x00000404, 0x01000400, 0x01000400, 0x00000000,
        0x00010004, 0x00010400, 0x00000000, 0x01010004,
    };

    private static final int[] S2 = {
        0x80108020, 0x80008000, 0x00008000, 0x00108020,
        0x00100000, 0x00000020, 0x80100020, 0x80008020,
        0x80000020, 0x80108020, 0x80108000, 0x80000000,
        0x80008000, 0x00100000, 0x00000020, 0x80100020,
        0x00108000, 0x00100020, 0x80008020, 0x00000000,
        0x80000000, 0x00008000, 0x00108020, 0x80100000,
        0x00100020, 0x80000020, 0x00000000, 0x00108000,
        0x00008020, 0x80108000, 0x80100000, 0x00008020,
        0x00000000, 0x00108020, 0x80100020, 0x00100000,
        0x80008020, 0x80100000, 0x80108000, 0x00008000,
        0x80100000, 0x80008000, 0x00000020, 0x80108020,
        0x00108020, 0x00000020, 0x00008000, 0x80000000,
        0x00008020, 0x80108000, 0x00100000, 0x80000020,
        0x00100020, 0x80008020, 0x80000020, 0x00100020,
        0x00108000, 0x00000000, 0x80008000, 0x00008020,
        0x80000000, 0x80100020, 0x80108020, 0x00108000,
    };

    private static final int[] S3 = {
        0x00000208, 0x08020200, 0x00000000, 0x08020008,
        0x08000200, 0x00000000, 0x00020208, 0x08000200,
        0x00020008, 0x08000008, 0x08000008, 0x00020000,
        0x08020208, 0x00020008, 0x08020000, 0x00000208,
        0x08000000, 0x00000008, 0x08020200, 0x00000200,
        0x00020200, 0x08020000, 0x08020008, 0x00020208,
        0x08000208, 0x00020200, 0x00020000, 0x08000208,
        0x00000008, 0x08020208, 0x00000200, 0x08000000,
        0x08020200, 0x08000000, 0x00020008, 0x00000208,
        0x00020000, 0x08020200, 0x08000200, 0x00000000,
        0x00000200, 0x00020008, 0x08020208, 0x08000200,
        0x08000008, 0x00000200, 0x00000000, 0x08020008,
        0x08000208, 0x00020000, 0x08000000, 0x08020208,
        0x00000008, 0x00020208, 0x00020200, 0x08000008,
        0x08020000, 0x08000208, 0x00000208, 0x08020000,
        0x00020208, 0x00000008, 0x08020008, 0x00020200,
    };

    private static final int[] S4 = {
        0x00802001, 0x00002081, 0x00002081, 0x00000080,
        0x00802080, 0x00800081, 0x00800001, 0x00002001,
        0x00000000, 0x00802000, 0x00802000, 0x00802081,
        0x00000081, 0x00000000, 0x00800080, 0x00800001,
        0x00000001, 0x00002000, 0x00800000, 0x00802001,
        0x00000080, 0x00800000, 0x00002001, 0x00002080,
        0x00800081, 0x00000001, 0x00002080, 0x00800080,
        0x00002000, 0x00802080, 0x00802081, 0x00000081,
        0x00800080, 0x00800001, 0x00802000, 0x00802081,
        0x00000081, 0x00000000, 0x00000000, 0x00802000,
        0x00002080, 0x00800080, 0x00800081, 0x00000001,
        0x00802001, 0x00002081, 0x00002081, 0x00000080,
        0x00802081, 0x00000081, 0x00000001, 0x00002000,
        0x00800001, 0x00002001, 0x00802080, 0x00800081,
        0x00002001, 0x00002080, 0x00800000, 0x00802001,
        0x00000080, 0x00800000, 0x00002000, 0x00802080,
    };

    private static final int[] S5 = {
        0x00000100, 0x02080100, 0x02080000, 0x42000100,
        0x00080000, 0x00000100, 0x40000000, 0x02080000,
        0x40080100, 0x00080000, 0x02000100, 0x40080100,
        0x42000100, 0x42080000, 0x00080100, 0x40000000,
        0x02000000, 0x40080000, 0x40080000, 0x00000000,
        0x40000100, 0x42080100, 0x42080100, 0x02000100,
        0x42080000, 0x40000100, 0x00000000, 0x42000000,
        0x02080100, 0x02000000, 0x42000000, 0x00080100,
        0x00080000, 0x42000100, 0x00000100, 0x02000000,
        0x40000000, 0x02080000, 0x42000100, 0x40080100,
        0x02000100, 0x40000000, 0x42080000, 0x02080100,
        0x40080100, 0x00000100, 0x02000000, 0x42080000,
        0x42080100, 0x00080100, 0x42000000, 0x42080100,
        0x02080000, 0x00000000, 0x40080000, 0x42000000,
        0x00080100, 0x02000100, 0x40000100, 0x00080000,
        0x00000000, 0x40080000, 0x02080100, 0x40000100,
    };

    private static final int[] S6 = {
        0x20000010, 0x20400000, 0x00004000, 0x20404010,
        0x20400000, 0x00000010, 0x20404010, 0x00400000,
        0x20004000, 0x00404010, 0x00400000, 0x20000010,
        0x00400010, 0x20004000, 0x20000000, 0x00004010,
        0x00000000, 0x00400010, 0x20004010, 0x00004000,
        0x00404000, 0x20004010, 0x00000010, 0x20400010,
        0x20400010, 0x00000000, 0x00404010, 0x20404000,
        0x00004010, 0x00404000, 0x20404000, 0x20000000,
        0x20004000, 0x00000010, 0x20400010, 0x00404000,
        0x20404010, 0x00400000, 0x00004010, 0x20000010,
        0x00400000, 0x20004000, 0x20000000, 0x00004010,
        0x20000010, 0x20404010, 0x00404000, 0x20400000,
        0x00404010, 0x20404000, 0x00000000, 0x20400010,
        0x00000010, 0x00004000, 0x20400000, 0x00404010,
        0x00004000, 0x00400010, 0x20004010, 0x00000000,
        0x20404000, 0x20000000, 0x00400010, 0x20004010,
    };

    private static final int[] S7 = {
        0x00200000, 0x04200002, 0x04000802, 0x00000000,
        0x00000800, 0x04000802, 0x00200802, 0x04200800,
        0x04200802, 0x00200000, 0x00000000, 0x04000002,
        0x00000002, 0x04000000, 0x04200002, 0x00000802,
        0x04000800, 0x00200802, 0x00200002, 0x04000800,
        0x04000002, 0x04200000, 0x04200800, 0x00200002,
        0x04200000, 0x00000800, 0x00000802, 0x04200802,
        0x00200800, 0x00000002, 0x04000000, 0x00200800,
        0x04000000, 0x00200800, 0x00200000, 0x04000802,
        0x04000802, 0x04200002, 0x04200002, 0x00000002,
        0x00200002, 0x04000000, 0x04000800, 0x00200000,
        0x04200800, 0x00000802, 0x00200802, 0x04200800,
        0x00000802, 0x04000002, 0x04200802, 0x04200000,
        0x00200800, 0x00000000, 0x00000002, 0x04200802,
        0x00000000, 0x00200802, 0x04200000, 0x00000800,
        0x04000002, 0x04000800, 0x00000800, 0x00200002,
    };

    private static final int[] S8 = {
        0x10001040, 0x00001000, 0x00040000, 0x10041040,
        0x10000000, 0x10001040, 0x00000040, 0x10000000,
        0x00040040, 0x10040000, 0x10041040, 0x00041000,
        0x10041000, 0x00041040, 0x00001000, 0x00000040,
        0x10040000, 0x10000040, 0x10001000, 0x00001040,
        0x00041000, 0x00040040, 0x10040040, 0x10041000,
        0x00001040, 0x00000000, 0x00000000, 0x10040040,
        0x10000040, 0x10001000, 0x00041040, 0x00040000,
        0x00041040, 0x00040000, 0x10041000, 0x00001000,
        0x00000040, 0x10040040, 0x00001000, 0x00041040,
        0x10001000, 0x00000040, 0x10000040, 0x10040000,
        0x10040040, 0x10000000, 0x00040000, 0x10001040,
        0x00000000, 0x10041040, 0x00040040, 0x10000040,
        0x10040000, 0x10001000, 0x10001040, 0x00000000,
        0x10041040, 0x00041000, 0x00041000, 0x00001040,
        0x00001040, 0x00040040, 0x10000000, 0x10041000,
    };
    
    private static final int[] rot = new int[] {
    	1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1
    };
	
	private int ret;
	private long[] key;
	
	private KeyDES des;
	
	public DES()
	{
		
	}
	
	public DES(KeyDES des)
	{
		this.setKey(des);
	}
	
	public KeyDES getKey()
	{
		return des;
	}
	
	void setKey(byte[] raw)
	{
		key = new long[16];
		int l, r;
		l = ((raw[0] & 0xFF) << 24) |
			((raw[1] & 0xFF) << 16) | 
			((raw[2] & 0xFF) <<  8) | 
			 (raw[3] & 0xF0);
		r = ((raw[3] & 0x0F) << 28) | 
			((raw[4] & 0xFF) << 20) | 
			((raw[5] & 0xFF) << 12) |
			((raw[6] & 0xFF) << 4);
		for(int i = 0; i < 16; i++) {
			int ro = rot[i];
			l = (l << ro | l >>> (28 - ro)) & 0xFFFFFFF0;
			r = (r << ro | r >>> (28 - ro)) & 0xFFFFFFF0;
			long k = 0;
			k |= PC2_1_4[(l >>>  4) & 0x70];
			k |= PC2_1_3[(l >>> 12) & 0xFF];
			k |= PC2_1_2[(l >>> 20) & 0x7F];
			k |= PC2_1_1[(l >>> 28) & 0xFF];
			k <<= 24;
			k |= PC2_2_4[(r >>>  4) & 0xFF];
			k |= PC2_2_3[(r >>> 12) & 0xFF];
			k |= PC2_2_2[(r >>> 20) & 0xFF];
			k |= PC2_2_1[(r >>> 28) & 0xFF];
			key[i] = k;
		}
	}
	
	void setKey(byte[] raw, int start)
	{
		key = new long[16];
		int l, r;
		l = ((raw[start++] & 0xFF) << 24) |
			((raw[start++] & 0xFF) << 16) | 
			((raw[start++] & 0xFF) <<  8) | 
			 (raw[start  ] & 0xF0);
		r = ((raw[start++] & 0x0F) << 28) | 
			((raw[start++] & 0xFF) << 20) | 
			((raw[start++] & 0xFF) << 12) |
			((raw[start  ] & 0xFF) << 4);
		for(int i = 0; i < 16; i++) {
			int ro = rot[i];
			l = (l << ro | l >>> (28 - ro)) & 0xFFFFFFF0;
			r = (r << ro | r >>> (28 - ro)) & 0xFFFFFFF0;
			long k = 0;
			k |= PC2_1_4[(l >>>  4) & 0x70];
			k |= PC2_1_3[(l >>> 12) & 0xFF];
			k |= PC2_1_2[(l >>> 20) & 0x7F];
			k |= PC2_1_1[(l >>> 28) & 0xFF];
			k <<= 24;
			k |= PC2_2_4[(r >>>  4) & 0xFF];
			k |= PC2_2_3[(r >>> 12) & 0xFF];
			k |= PC2_2_2[(r >>> 20) & 0xFF];
			k |= PC2_2_1[(r >>> 28) & 0xFF];
			key[i] = k;
		}
	}

	public void setKey(KeyDES t)
	{
		des = t;
		setKey(t.getBytes());
	}
	
	private int IP(byte[] bytes, int start)
	{
		long l = 0;
		l |= IP[bytes[start++] & 0xFF];
		l >>>= 1;
		l |= IP[bytes[start++] & 0xFF];
		l >>>= 1;
		l |= IP[bytes[start++] & 0xFF];
		l >>>= 1;
		l |= IP[bytes[start++] & 0xFF];
		l >>>= 1;
		l |= IP[bytes[start++] & 0xFF];
		l >>>= 1;
		l |= IP[bytes[start++] & 0xFF];
		l >>>= 1;
		l |= IP[bytes[start++] & 0xFF];
		l >>>= 1;
		l |= IP[bytes[start  ] & 0xFF];
		ret = (int) (l & 0xFFFFFFFFL);
		l >>>= 32;
		return (int) (l & 0xFFFFFFFFL);
	}
	
	private static void iIP(int l, int r, byte[] bytes, int start)
	{
		long o = iIP[l & 0xFF];
		o >>>= 1;
		o |= iIP[r & 0xFF];
		o >>>= 1;
		l >>>= 8;
		r >>>= 8;
		o |= iIP[l & 0xFF];
		o >>>= 1;
		o |= iIP[r & 0xFF];
		o >>>= 1;
		l >>>= 8;
		r >>>= 8;
		o |= iIP[l & 0xFF];
		o >>>= 1;
		o |= iIP[r & 0xFF];
		o >>>= 1;
		l >>>= 8;
		r >>>= 8;
		o |= iIP[l & 0xFF];
		o >>>= 1;
		o |= iIP[r & 0xFF];
		Bits.BigEndian.longToBytes(o, bytes, start);
	}
	
	public void encryptBlock(byte[] block, int start)
	{
		int l, r, t;
		l = IP(block, start);
		r = ret;
		long w = (r << 31) & 0xFFFFFFFFL;
		w <<= 1;
		w |= r & 0xF8000000L;
		w <<= 2;
		w |= r & 0x1F800000L;
		w <<= 2;
		w |= r & 0x01F80000L;
		w <<= 2;
		w |= r & 0x001F8000L;
		w <<= 2;
		w |= r & 0x0001F800L;
		w <<= 2;
		w |= r & 0x00001F80L;
		w <<= 2;
		w |= r & 0x000001F8L;
		w <<= 2;
		w |= r & 0x0000001FL;
		w <<= 1;
		w |= r >>> 31;
		w ^= key[0];
		l ^= S8[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S7[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S6[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S5[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S4[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S3[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S2[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S1[(int) (w & 0x3F)];
		for(int i = 1; i < 16; i++) {
			t = l;
			l = r;
			r = t;
			w = (r << 31) & 0xFFFFFFFFL;
			w <<= 1;
			w |= r & 0xF8000000L;
			w <<= 2;
			w |= r & 0x1F800000L;
			w <<= 2;
			w |= r & 0x01F80000L;
			w <<= 2;
			w |= r & 0x001F8000L;
			w <<= 2;
			w |= r & 0x0001F800L;
			w <<= 2;
			w |= r & 0x00001F80L;
			w <<= 2;
			w |= r & 0x000001F8L;
			w <<= 2;
			w |= r & 0x0000001FL;
			w <<= 1;
			w |= r >>> 31;
			w ^= key[i];
			l ^= S8[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S7[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S6[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S5[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S4[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S3[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S2[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S1[(int) (w & 0x3F)];
		}
		iIP(l, r, block, start);
	}

	public void encryptBlock(byte[] block, int start0, byte[] out, int start1)
	{
		int l, r, t;
		l = IP(block, start0);
		r = ret;
		long w = (r << 31) & 0xFFFFFFFFL;
		w <<= 1;
		w |= r & 0xF8000000L;
		w <<= 2;
		w |= r & 0x1F800000L;
		w <<= 2;
		w |= r & 0x01F80000L;
		w <<= 2;
		w |= r & 0x001F8000L;
		w <<= 2;
		w |= r & 0x0001F800L;
		w <<= 2;
		w |= r & 0x00001F80L;
		w <<= 2;
		w |= r & 0x000001F8L;
		w <<= 2;
		w |= r & 0x0000001FL;
		w <<= 1;
		w |= r >>> 31;
		w ^= key[0];
		l ^= S8[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S7[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S6[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S5[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S4[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S3[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S2[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S1[(int) (w & 0x3F)];
		for(int i = 1; i < 16; i++) {
			t = l;
			l = r;
			r = t;
			w = (r << 31) & 0xFFFFFFFFL;
			w <<= 1;
			w |= r & 0xF8000000L;
			w <<= 2;
			w |= r & 0x1F800000L;
			w <<= 2;
			w |= r & 0x01F80000L;
			w <<= 2;
			w |= r & 0x001F8000L;
			w <<= 2;
			w |= r & 0x0001F800L;
			w <<= 2;
			w |= r & 0x00001F80L;
			w <<= 2;
			w |= r & 0x000001F8L;
			w <<= 2;
			w |= r & 0x0000001FL;
			w <<= 1;
			w |= r >>> 31;
			w ^= key[i];
			l ^= S8[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S7[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S6[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S5[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S4[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S3[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S2[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S1[(int) (w & 0x3F)];
		}
		iIP(l, r, out, start1);
	}
	
	public void decryptBlock(byte[] block, int start)
	{
		int l, r, t;
		l = IP(block, start);
		r = ret;
		long w = (r << 31) & 0xFFFFFFFFL;
		w <<= 1;
		w |= r & 0xF8000000L;
		w <<= 2;
		w |= r & 0x1F800000L;
		w <<= 2;
		w |= r & 0x01F80000L;
		w <<= 2;
		w |= r & 0x001F8000L;
		w <<= 2;
		w |= r & 0x0001F800L;
		w <<= 2;
		w |= r & 0x00001F80L;
		w <<= 2;
		w |= r & 0x000001F8L;
		w <<= 2;
		w |= r & 0x0000001FL;
		w <<= 1;
		w |= r >>> 31;
		w ^= key[15];
		l ^= S8[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S7[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S6[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S5[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S4[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S3[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S2[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S1[(int) (w & 0x3F)];
		for(int i = 14; i > -1; i--) {
			t = l;
			l = r;
			r = t;
			w = (r << 31) & 0xFFFFFFFFL;
			w <<= 1;
			w |= r & 0xF8000000L;
			w <<= 2;
			w |= r & 0x1F800000L;
			w <<= 2;
			w |= r & 0x01F80000L;
			w <<= 2;
			w |= r & 0x001F8000L;
			w <<= 2;
			w |= r & 0x0001F800L;
			w <<= 2;
			w |= r & 0x00001F80L;
			w <<= 2;
			w |= r & 0x000001F8L;
			w <<= 2;
			w |= r & 0x0000001FL;
			w <<= 1;
			w |= r >>> 31;
			w ^= key[i];
			l ^= S8[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S7[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S6[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S5[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S4[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S3[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S2[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S1[(int) (w & 0x3F)];
		}
		iIP(l, r, block, start);
	}

	public void decryptBlock(byte[] block, int start0, byte[] out, int start1)
	{
		int l, r, t;
		l = IP(block, start0);
		r = ret;
		long w = (r << 31) & 0xFFFFFFFFL;
		w <<= 1;
		w |= r & 0xF8000000L;
		w <<= 2;
		w |= r & 0x1F800000L;
		w <<= 2;
		w |= r & 0x01F80000L;
		w <<= 2;
		w |= r & 0x001F8000L;
		w <<= 2;
		w |= r & 0x0001F800L;
		w <<= 2;
		w |= r & 0x00001F80L;
		w <<= 2;
		w |= r & 0x000001F8L;
		w <<= 2;
		w |= r & 0x0000001FL;
		w <<= 1;
		w |= r >>> 31;
		w ^= key[15];
		l ^= S8[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S7[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S6[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S5[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S4[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S3[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S2[(int) (w & 0x3F)];
		w >>>= 6;
		l ^= S1[(int) (w & 0x3F)];
		for(int i = 14; i > -1; i--) {
			t = l;
			l = r;
			r = t;
			w = (r << 31) & 0xFFFFFFFFL;
			w <<= 1;
			w |= r & 0xF8000000L;
			w <<= 2;
			w |= r & 0x1F800000L;
			w <<= 2;
			w |= r & 0x01F80000L;
			w <<= 2;
			w |= r & 0x001F8000L;
			w <<= 2;
			w |= r & 0x0001F800L;
			w <<= 2;
			w |= r & 0x00001F80L;
			w <<= 2;
			w |= r & 0x000001F8L;
			w <<= 2;
			w |= r & 0x0000001FL;
			w <<= 1;
			w |= r >>> 31;
			w ^= key[i];
			l ^= S8[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S7[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S6[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S5[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S4[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S3[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S2[(int) (w & 0x3F)];
			w >>>= 6;
			l ^= S1[(int) (w & 0x3F)];
		}
		iIP(l, r, out, start1);
	}
	
	public void reset() {}

	public void wipe()
	{
		Arrays.fill(key, 0);
		des = null;
		ret = 0;
		key = null;
		
	}

	public int plaintextSize()
	{
		return 8;
	}

	public int ciphertextSize()
	{
		return 8;
	}	
	
	public static int test()
	{
		int e = 0;
		try {
			for(int i = 0; i < 256; i++) {
				long res = IP[i];
				if((i & 1) != 0 ^ (res & 0x0000008000000000L) != 0) {
					e++;
					Log.err.println("Encountered an error with bit number 8 while testing IP, i = " + i);
					break;
				}
				if((i & 2) != 0 ^ (res & 0x0000000000000080L) != 0) {
					e++;
					Log.err.println("Encountered an error with bit number 7 while testing IP, i = " + i);
					break;
				}
				if((i & 4) != 0 ^ (res & 0x0000800000000000L) != 0) {
					e++;
					Log.err.println("Encountered an error with bit number 6 while testing IP, i = " + i);
					break;
				}
				if((i & 8) != 0 ^ (res & 0x0000000000008000L) != 0) {
					e++;
					Log.err.println("Encountered an error with bit number 5 while testing IP, i = " + i);
					break;
				}
				if((i & 16) != 0 ^ (res & 0x0080000000000000L) != 0) {
					e++;
					Log.err.println("Encountered an error with bit number 4 while testing IP, i = " + i);
					break;
				}
				if((i & 32) != 0 ^ (res & 0x0000000000800000L) != 0) {
					e++;
					Log.err.println("Encountered an error with bit number 3 while testing IP, i = " + i);
					break;
				}
				if((i & 64) != 0 ^ (res & 0x8000000000000000L) != 0) {
					e++;
					Log.err.println("Encountered an error with bit number 2 while testing IP, i = " + i);
					break;
				}
				if((i & 128) != 0 ^ (res & 0x0000000080000000L) != 0) {
					e++;
					Log.err.println("Encountered an error with bit number 1 while testing IP, i = " + i);
					break;
				}
			}
			
			byte[] ints1 = new byte[7];
			byte[] ints2 = new byte[7];
			RandUtils.fillArr(ints1);
			RandUtils.fillArr(ints2);
			KeyDES a1 = new KeyDES(ints1);
			KeyDES a2 = new KeyDES(ints2);
			DES aes = new DES(a1);
			e += ISymmetric.testSymmetric(aes, a2);
		} catch(Exception ex) {
			Log.err.println("Exception " + ex.getClass().getSimpleName() + " encountered while testing DES: " + ex.getMessage());
			ex.printStackTrace();
			return e++;
		}
		return e;
	}

	public KeyFactory<KeyDES> keyFactory()
	{
		return KeyDES.factory;
	}
	
}
